#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define FUNC    3

/ {
    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp ESC>, <&kp CAPS>;
        };
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>; // Right-side keys
            hold-trigger-on-release;
        };
        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>; // Left-side keys
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // | ESC  |  Q  |  W  |  E   |  R  |  T  |      |  Y  |  U   |  I   |  O  |  P  | BKSP |
            // | TAB  |  A  |  S  |  D   |  F  |  G  |      |  H  |  J   |  K   |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C   |  V  |  B  |      |  N  |  M   |  ,   |  .  |  /  | ALT  |
            //                    | CTRL | LWR | SPC |      | ENT | RSE  | CAPS |

            // CAGS(Control-Alt/Option-Gui/Command-Shift) as home row mod

            bindings = <
                &td0      &kp Q        &kp W       &kp E        &kp R        &kp T          &kp Y   &kp U        &kp I        &kp O       &kp P          &kp BSPC
                &kp TAB   &hml LGUI A  &hml LALT S &hml LCTRL D &hml LSHFT F &kp G          &kp H   &hmr RSHFT J &hmr RCTRL K &hmr RALT L &hmr RGUI SEMI &kp SQT
                &kp LSHFT &kp Z        &kp X       &kp C        &kp V        &kp B          &kp N   &kp M        &kp COMMA    &kp DOT     &kp FSLH       &kp RGUI
                                                   &kp LCTRL    &mo LOWER    &kp SPACE      &kp RET &mo RAISE    &kp CAPS
            >;
        };

        lower_layer {
            // | | 1 | 2 | 3 | 4 | 5 |      |  6   |  7   |  8   |  9   |  0   | BKSP  |
            // | | = | / | * | - | + |      | LFT  | DWN  |  UP  | RGT  | P-DW | P-UP  |
            // | |   |   |   |   |   |      | PREV | VOLD | VOLU | NEXT | PP   | MUTE  |
            //           |   |   |   |      |      | FUNC |      |

            bindings = <
                &trans &kp N1    &kp N2   &kp N3    &kp N4    &kp N5         &kp N6     &kp N7       &kp N8       &kp N9     &kp N0           &kp BSPC
                &trans &kp EQUAL &kp FSLH &kp ASTRK &kp MINUS &kp PLUS       &kp LEFT   &kp DOWN     &kp UP       &kp RIGHT  &kp PAGE_DOWN    &kp PAGE_UP
                &trans &trans    &trans   &trans    &trans    &trans         &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &kp C_PLAY_PAUSE &kp C_MUTE
                                          &trans    &trans    &kp SPACE      &kp RET    &mo FUNC     &trans
            >;
        };

        raise_layer {
            // | | ! | @ | # |  $   | % |      | ^ | & | * |  |  | BKSP |
            // | | ` | _ | ` |  \   | | |      |   |   |   | [ | ] |      |
            // | |   |   |   |      |   |      |   | < | > | { | } |      |
            //           |   | FUNC |   |      |   |   |   |

            bindings = <
                &trans &kp EXCL  &kp AT    &kp HASH  &kp DLLR &kp PRCNT      &kp CARET &kp AMPS &kp ASTRK &trans &trans &kp BSPC
                &trans &trans    &kp LT    &kp LBKT  &kp LBRC &kp LPAR       &kp RPAR  &kp RBRC &kp RBKT  &kp GT &trans &trans
                &trans &kp TILDE &kp UNDER &kp GRAVE &kp BSLH &kp PIPE       &trans    &trans   &trans    &trans &trans &trans
                                           &trans    &mo FUNC &kp SPACE      &kp RET   &trans   &trans
            >;
        };

        function_layer {
            // | |   F1   | F2  | F3  | F4  | F5  |      | F6 | F7 | F8 | F9 | F10 | |
            // | | BT_CLR | USB | BLE | F11 | F12 |      |    |    |    |    |     | |
            // | |  BT5   | BT4 | BT3 | BT2 | BT1 |      |    |    |    |    |     | |
            //                  |     |     |     |      |    |    |    |

            bindings = <
                &trans &kp F1       &kp F2       &kp F3       &kp F4       &kp F5            &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &trans
                &trans &bt BT_CLR   &out OUT_USB &out OUT_BLE &kp F11      &kp F12           &trans &trans &trans &trans &trans  &trans
                &trans &bt BT_SEL 4 &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0      &trans &trans &trans &trans &trans  &trans
                                                 &trans       &trans       &trans            &trans &trans &trans
            >;
        };
    };
};
